@page "/update-student/{id:int}"
@inject StudentRemote.StudentRemoteClient _grpcClient
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Update Student</PageTitle>

@if (student != null) 
{
    <p>Update Student with ID == @Id</p>

    <EditForm Model="student" OnValidSubmit="HandleValidSubmit" FormName="UpdateStudentForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="FirstName">First Name:</label>
            <InputText id="FirstName" class="form-control" @bind-Value="student.FirstName" />
        </div>

        <div class="form-group">
            <label for="LastName">Last Name:</label>
            <InputText id="LastName" class="form-control" @bind-Value="student.LastName" />
        </div>

        <div class="form-group">
            <label for="School">School:</label>
            <InputText id="School" class="form-control" @bind-Value="student.School" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}
else
{
    <p>Student with ID == @Id not found</p>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private BlazorGrpcClient.StudentModel student {get; set;} = new BlazorGrpcClient.StudentModel();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var sInput = new StudentLookupModel { StudentId = Id.Value };
            student = await _grpcClient.GetStudentInfoAsync(sInput);
        }
    }

    private async Task HandleValidSubmit()
    {
        var replyUpdateStudent = await _grpcClient.UpdateStudentAsync(student);
        NavManager.NavigateTo("/");
    }
}
