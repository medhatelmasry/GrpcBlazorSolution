@page "/delete-student/{id:int}"
@inject StudentRemote.StudentRemoteClient _grpcClient
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Update Student</PageTitle>

@if (student != null)
{
    // display student details
    <fieldset>
        <legend>Student Information</legend>
        <p>Student ID: @Id</p>
        <p>First Name: @student.FirstName</p>
        <p>Last Name: @student.LastName</p>
        <p>School: @student.School</p>
    </fieldset>

    <p>Are you sure you want to delete this item?</p>

    <button class="btn btn-danger" @onclick="HandleDeleteStudent">Delete</button>

    @code {
        private async Task HandleDeleteStudent()
        {
            var deleteLookupModel = new StudentLookupModel();
            deleteLookupModel.StudentId = student.StudentId;
            var replyDeleteStudent = await _grpcClient.DeleteStudentAsync(deleteLookupModel);
            NavManager.NavigateTo("/");
        }
    }
}
else
{
    <p>Student with ID == @Id not found</p>
}


@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private BlazorGrpcClient.StudentModel student {get; set;} = new BlazorGrpcClient.StudentModel();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var sInput = new StudentLookupModel { StudentId = Id.Value };
            student = await _grpcClient.GetStudentInfoAsync(sInput);
        }
    }
}
